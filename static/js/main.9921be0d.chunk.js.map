{"version":3,"sources":["CardCanvas/CardCanvas.tsx","CardForm/CardForm.tsx","App.tsx","reportWebVitals.ts","index.tsx","CardForm/CardForm.module.scss","CardCanvas/CardCanvas.module.scss","App.module.scss"],"names":["CardCanvas","values","canvasRef","useRef","useEffect","ctx","current","getContext","clearRect","strokeStyle","fillStyle","opts","stroke","radius","tl","tr","br","bl","beginPath","moveTo","x","y","lineTo","width","quadraticCurveTo","height","closePath","fill","roundRect","textAlign","font","fillText","title","text","split","forEach","line","i","save","className","classes","CardCanvasContainer","ref","onClick","canvas","a","document","createElement","href","toDataURL","download","length","click","CardForm","onChange","handleChange","e","target","name","value","CardFormContainer","CardFormTable","type","App","useState","setValues","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"uNAuEA,IA+DeA,EA/DqB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC/BC,EAAYC,iBAAO,MAQzBC,qBAAU,WACR,IAAMC,EANcH,EAAUI,QAEhBC,WAAW,MAMzBF,EAAIG,UAAU,EAAG,EAAG,IAAK,KAGzBH,EAAII,YAAc,QAClBJ,EAAIK,UAAY,QA5EpB,SACEL,EACAM,GAU2B,qBAAhBA,EAAKC,SACdD,EAAKC,QAAS,GAEW,qBAAhBD,EAAKE,SACdF,EAAKE,OAAS,GAEW,kBAAhBF,EAAKE,SACdF,EAAKE,OAAS,CACZC,GAAIH,EAAKE,OACTE,GAAIJ,EAAKE,OACTG,GAAIL,EAAKE,OACTI,GAAIN,EAAKE,SAGbR,EAAIa,YACJb,EAAIc,OAAOR,EAAKS,EAAIT,EAAKE,OAAOC,GAAIH,EAAKU,GACzChB,EAAIiB,OAAOX,EAAKS,EAAIT,EAAKY,MAAQZ,EAAKE,OAAOE,GAAIJ,EAAKU,GACtDhB,EAAImB,iBACFb,EAAKS,EAAIT,EAAKY,MACdZ,EAAKU,EACLV,EAAKS,EAAIT,EAAKY,MACdZ,EAAKU,EAAIV,EAAKE,OAAOE,IAEvBV,EAAIiB,OAAOX,EAAKS,EAAIT,EAAKY,MAAOZ,EAAKU,EAAIV,EAAKc,OAASd,EAAKE,OAAOG,IACnEX,EAAImB,iBACFb,EAAKS,EAAIT,EAAKY,MACdZ,EAAKU,EAAIV,EAAKc,OACdd,EAAKS,EAAIT,EAAKY,MAAQZ,EAAKE,OAAOG,GAClCL,EAAKU,EAAIV,EAAKc,QAEhBpB,EAAIiB,OAAOX,EAAKS,EAAIT,EAAKE,OAAOI,GAAIN,EAAKU,EAAIV,EAAKc,QAClDpB,EAAImB,iBACFb,EAAKS,EACLT,EAAKU,EAAIV,EAAKc,OACdd,EAAKS,EACLT,EAAKU,EAAIV,EAAKc,OAASd,EAAKE,OAAOI,IAErCZ,EAAIiB,OAAOX,EAAKS,EAAGT,EAAKU,EAAIV,EAAKE,OAAOC,IACxCT,EAAImB,iBAAiBb,EAAKS,EAAGT,EAAKU,EAAGV,EAAKS,EAAIT,EAAKE,OAAOC,GAAIH,EAAKU,GACnEhB,EAAIqB,YACAf,EAAKgB,MACPtB,EAAIsB,OAEFhB,EAAKC,QACPP,EAAIO,SAqBJgB,CAAUvB,EAAK,CACbe,EAAG,EACHC,EAAG,EACHE,MAAO,IACPE,OAAQ,IACRZ,OAAQ,GACRc,MAAM,EACNf,QAAQ,IAIVP,EAAIwB,UAAY,SAChBxB,EAAIyB,KAAO,yBACXzB,EAAIK,UAAY,QAChBL,EAAI0B,SAAS9B,EAAO+B,MAAO,IAAK,GAAI,KAIpC3B,EAAIwB,UAAY,OAChBxB,EAAIyB,KAAJ,UAFiB,GAEjB,wBACAzB,EAAIK,UAAY,QAChBT,EAAOgC,KAAKC,MAAM,MAAMC,SAAQ,SAACC,EAAMC,GACrChC,EAAI0B,SAASK,EAAM,GAAI,IALR,GAKcC,EAAmB,EAAJA,EAAO,QAGrDhC,EAAIiC,UAWN,OACE,sBAAKC,UAAWC,IAAQC,oBAAxB,UACE,wBAAQC,IAAKxC,EAAWqB,MAAM,MAAME,OAAO,QAC3C,4BACE,wBAAQkB,QAZK,WACjB,IAAMC,EAAc1C,EAAUI,QACxBuC,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAOJ,EAAOK,UAAU,YAAa,KACvCJ,EAAEK,SAAF,UAAgBjD,EAAO+B,MAAMmB,OAAS,EAAIlD,EAAO+B,MAAQ,QAAzD,QACAa,EAAEO,SAOE,wD,8BChFOC,EArCmB,SAAC,GAA0B,IAAxBpD,EAAuB,EAAvBA,OAAQqD,EAAe,EAAfA,SACrCC,EAAe,SACnBC,GAEAF,EAAS,2BAAKrD,GAAN,kBAAeuD,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAGlD,OACE,qBAAKpB,UAAWC,IAAQoB,kBAAxB,SACE,wBAAOrB,UAAWC,IAAQqB,cAA1B,UACE,mDACA,kCACE,+BACE,uCACA,6BACE,uBACEC,KAAK,OACLJ,KAAK,QACLC,MAAO1D,EAAO+B,MACdsB,SAAUC,SAIhB,+BACE,sCACA,6BACE,0BAAUG,KAAK,OAAOJ,SAAUC,EAAhC,SACGtD,EAAOgC,qB,gBCRT8B,MAlBf,WAAgB,IAAD,EACeC,mBAAqB,CAAEhC,MAAO,GAAIC,KAAM,KADvD,mBACNhC,EADM,KACEgE,EADF,KAOb,OACE,sBAAK1B,UAAWC,IAAQuB,IAAxB,UACE,gDACA,gCACE,cAAC,EAAD,CAAU9D,OAAQA,EAAQqD,SARX,SAACrD,GACpBgE,EAAUhE,MAQN,cAAC,EAAD,CAAYA,OAAQA,WCVbiE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASgC,eAAe,SAM1BZ,K,kBCfAa,EAAOC,QAAU,CAAC,cAAgB,kC,kBCAlCD,EAAOC,QAAU,CAAC,oBAAsB,0C,kBCAxCD,EAAOC,QAAU,CAAC,IAAM,oB","file":"static/js/main.9921be0d.chunk.js","sourcesContent":["/** @format */\n\nimport React, { useEffect, useRef } from \"react\";\nimport { CardValues } from \"../App\";\nimport classes from \"./CardCanvas.module.scss\";\n\ninterface Props {\n  values: CardValues;\n}\n\n// draw round rectangle\nfunction roundRect(\n  ctx: CanvasRenderingContext2D,\n  opts: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    radius?: number | { tl: number; tr: number; br: number; bl: number };\n    stroke?: boolean;\n    fill?: boolean;\n  }\n) {\n  if (typeof opts.stroke === \"undefined\") {\n    opts.stroke = true;\n  }\n  if (typeof opts.radius === \"undefined\") {\n    opts.radius = 5;\n  }\n  if (typeof opts.radius === \"number\") {\n    opts.radius = {\n      tl: opts.radius,\n      tr: opts.radius,\n      br: opts.radius,\n      bl: opts.radius,\n    };\n  }\n  ctx.beginPath();\n  ctx.moveTo(opts.x + opts.radius.tl, opts.y);\n  ctx.lineTo(opts.x + opts.width - opts.radius.tr, opts.y);\n  ctx.quadraticCurveTo(\n    opts.x + opts.width,\n    opts.y,\n    opts.x + opts.width,\n    opts.y + opts.radius.tr\n  );\n  ctx.lineTo(opts.x + opts.width, opts.y + opts.height - opts.radius.br);\n  ctx.quadraticCurveTo(\n    opts.x + opts.width,\n    opts.y + opts.height,\n    opts.x + opts.width - opts.radius.br,\n    opts.y + opts.height\n  );\n  ctx.lineTo(opts.x + opts.radius.bl, opts.y + opts.height);\n  ctx.quadraticCurveTo(\n    opts.x,\n    opts.y + opts.height,\n    opts.x,\n    opts.y + opts.height - opts.radius.bl\n  );\n  ctx.lineTo(opts.x, opts.y + opts.radius.tl);\n  ctx.quadraticCurveTo(opts.x, opts.y, opts.x + opts.radius.tl, opts.y);\n  ctx.closePath();\n  if (opts.fill) {\n    ctx.fill();\n  }\n  if (opts.stroke) {\n    ctx.stroke();\n  }\n}\n\nconst CardCanvas: React.FC<Props> = ({ values }) => {\n  const canvasRef = useRef(null);\n\n  const getContext = (): CanvasRenderingContext2D => {\n    const canvas: any = canvasRef.current;\n\n    return canvas.getContext(\"2d\");\n  };\n\n  useEffect(() => {\n    const ctx: CanvasRenderingContext2D = getContext();\n\n    ctx.clearRect(0, 0, 200, 300);\n\n    // outline\n    ctx.strokeStyle = \"black\";\n    ctx.fillStyle = \"white\";\n    roundRect(ctx, {\n      x: 0,\n      y: 0,\n      width: 200,\n      height: 300,\n      radius: 20,\n      fill: true,\n      stroke: true,\n    });\n\n    // title\n    ctx.textAlign = \"center\";\n    ctx.font = \"2rem 'Sawarabi Gothic'\";\n    ctx.fillStyle = \"black\";\n    ctx.fillText(values.title, 100, 80, 190);\n\n    // text\n    const fontSize = 14;\n    ctx.textAlign = \"left\";\n    ctx.font = `${fontSize}px 'Sawarabi Gothic'`;\n    ctx.fillStyle = \"black\";\n    values.text.split(\"\\n\").forEach((line, i) => {\n      ctx.fillText(line, 10, 130 + i * fontSize + i * 2, 180);\n    });\n\n    ctx.save();\n  });\n\n  const doDownload = () => {\n    const canvas: any = canvasRef.current;\n    const a = document.createElement(\"a\");\n    a.href = canvas.toDataURL(\"image/png\", 0.85);\n    a.download = `${values.title.length > 0 ? values.title : \"image\"}.png`;\n    a.click();\n  };\n\n  return (\n    <div className={classes.CardCanvasContainer}>\n      <canvas ref={canvasRef} width=\"200\" height=\"300\" />\n      <p>\n        <button onClick={doDownload}>ダウンロード</button>\n      </p>\n    </div>\n  );\n};\n\nexport default CardCanvas;\n","/** @format */\n\nimport React, { ChangeEvent, useState } from \"react\";\nimport { CardValues } from \"../App\";\nimport classes from \"./CardForm.module.scss\";\n\ninterface Props {\n  values: CardValues;\n  onChange: (values: CardValues) => void;\n}\n\nconst CardForm: React.FC<Props> = ({ values, onChange }) => {\n  const handleChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    onChange({ ...values, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <div className={classes.CardFormContainer}>\n      <table className={classes.CardFormTable}>\n        <caption>Card Details</caption>\n        <tbody>\n          <tr>\n            <th>Title</th>\n            <td>\n              <input\n                type=\"text\"\n                name=\"title\"\n                value={values.title}\n                onChange={handleChange}\n              />\n            </td>\n          </tr>\n          <tr>\n            <th>Text</th>\n            <td>\n              <textarea name=\"text\" onChange={handleChange}>\n                {values.text}\n              </textarea>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default CardForm;\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport CardCanvas from \"./CardCanvas/CardCanvas\";\nimport CardForm from \"./CardForm/CardForm\";\nimport classes from \"./App.module.scss\";\n\nexport interface CardValues {\n  title: string;\n  text: string;\n}\n\nfunction App() {\n  const [values, setValues] = useState<CardValues>({ title: \"\", text: \"\" });\n\n  const handleChange = (values: CardValues) => {\n    setValues(values);\n  };\n\n  return (\n    <div className={classes.App}>\n      <h1>Card Simulator</h1>\n      <div>\n        <CardForm values={values} onChange={handleChange} />\n        <CardCanvas values={values} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardFormTable\":\"CardForm_CardFormTable__3zcUi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardCanvasContainer\":\"CardCanvas_CardCanvasContainer__2j7nk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};"],"sourceRoot":""}